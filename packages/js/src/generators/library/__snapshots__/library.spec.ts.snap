// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib --bundler=vite should add build and test targets with vite and vitest 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import dts from 'vite-plugin-dts';
import * as path from 'path';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-lib',

  plugins: [
    nxViteTsPaths(),
    dts({
      entryRoot: 'src',
      tsconfigPath: path.join(__dirname, 'tsconfig.lib.json'),
    }),
  ],

  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },

  // Configuration for building your library.
  // See: https://vitejs.dev/guide/build.html#library-mode
  build: {
    outDir: '../dist/my-lib',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
    lib: {
      // Could also be a dictionary or array of multiple entry points.
      entry: 'src/index.ts',
      name: 'my-lib',
      fileName: 'index',
      // Change this to the formats you want to support.
      // Don't forget to update your package.json as well.
      formats: ['es', 'cjs'],
    },
    rollupOptions: {
      // External packages that should not be bundled into your library.
      external: [],
    },
  },

  test: {
    globals: true,
    cache: {
      dir: '../node_modules/.vitest/my-lib',
    },
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],

    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-lib',
      provider: 'v8',
    },
  },
});
"
`;

exports[`lib --bundler=vite should add build and test targets with vite and vitest 2`] = `
"# my-lib

This library was generated with [Nx](https://nx.dev).

## Building

Run \`nx build my-lib\` to build the library.

## Running unit tests

Run \`nx test my-lib\` to execute the unit tests via [Vitest](https://vitest.dev/).
"
`;

exports[`lib --bundler=vite should add build and test targets with vite and vitest 3`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "declaration": true,
    "types": ["node", "vite/client"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["vite.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`lib --bundler=vite should respect unitTestRunner if passed 1`] = `
"# my-lib

This library was generated with [Nx](https://nx.dev).

## Building

Run \`nx build my-lib\` to build the library.
"
`;

exports[`lib --bundler=vite should respect unitTestRunner if passed 2`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "declaration": true,
    "types": ["node", "vite/client"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`lib --bundler=vite should respect unitTestRunner if passed 3`] = `
"# my-lib

This library was generated with [Nx](https://nx.dev).

## Building

Run \`nx build my-lib\` to build the library.

## Running unit tests

Run \`nx test my-lib\` to execute the unit tests via [Jest](https://jestjs.io).
"
`;

exports[`lib --bundler=vite should respect unitTestRunner if passed 4`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "declaration": true,
    "types": ["node", "vite/client"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
}
"
`;

exports[`lib --bundler=vite should respect unitTestRunner if passed 5`] = `
"/* eslint-disable */
export default {
  displayName: 'my-lib',
  preset: '../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-lib',
};
"
`;

exports[`lib --unit-test-runner jest should generate test configuration with swc and js 1`] = `
"/* eslint-disable */
const { readFileSync } = require('fs');

// Reading the SWC compilation config and remove the "exclude"
// for the test files to be compiled by SWC
const { exclude: _, ...swcJestConfig } = JSON.parse(
  readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')
);

// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.
// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"
if (swcJestConfig.swcrc === undefined) {
  swcJestConfig.swcrc = false;
}

// Uncomment if using global setup/teardown files being transformed via swc
// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries
// jest needs EsModule Interop to find the default exported setup/teardown functions
// swcJestConfig.module.noInterop = false;

module.exports = {
  displayName: 'my-lib',
  preset: '../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  testEnvironment: 'jsdom',
  coverageDirectory: '../coverage/my-lib',
};
"
`;
